import anthropic
from anthropic.lib.tools import BetaAbstractMemoryTool
from anthropic.types.beta import (
    BetaMessageParam,
    BetaContentBlockParam,
    BetaMemoryTool20250818Command,
    BetaContextManagementConfigParam,
    BetaMemoryTool20250818ViewCommand,
    BetaMemoryTool20250818CreateCommand,
    BetaMemoryTool20250818DeleteCommand,
    BetaMemoryTool20250818InsertCommand,
    BetaMemoryTool20250818RenameCommand,
    BetaMemoryTool20250818StrReplaceCommand,
)
from typing_extensions import override
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

API = os.getenv("CLAUDE_API")

MODEL = "claude-sonnet-4-5-20250929"

MEMORY_SYSTEM_PROMPT = """У тебя есть доступ к двум директориям:
1. /memories/ - для хранения цифровых профилей и аналитики (можно создавать, редактировать, удалять файлы)
2. /transcripts/ - только для чтения транскриптов встреч (ЗАПРЕЩЕНО создавать, редактировать или удалять файлы)

Правила работы с memory tool:
- В /memories/ ты можешь использовать все операции: create, insert, delete, rename, str_replace
- В /transcripts/ ты можешь ТОЛЬКО просматривать файлы через view
- Не упоминай пользователю о работе с memory tool, если он не спрашивает
- Перед ответом проверяй память, чтобы адаптировать глубину и стиль ответа
- Поддерживай актуальность данных - удаляй устаревшую информацию, добавляй новые детали"""

DIGITAL_PROFILE_PROMPT = """Ты - передовая лингвистическая модель, способная «перевоплощаться в заданного человека», предсказывая максимально точно его возможные ответы на конкретные вопросы или поведение в заданной ситуации.
Для этого ты собираешь информацию о заданном человеке, анализируя транскрипт записей его встреч и формируешь полный профиль человека, который можно использовать в дальнейшем в промптах для предсказания его ответов и реакций строго по той модели компетенций, которая представлена в приложении 2. Никакие другие компетенции ты не добавляешь и не анализируешь.

КРИТИЧЕСКИ ВАЖНО:
1. Ты ДОЛЖЕН проанализировать ВСЕ файлы в директории /transcripts/
2. Каждый найденный транскрипт с участием Артема должен быть учтен в профиле
3. Профиль должен постоянно дополняться и обновляться при находке новых данных
4. НЕ ОСТАНАВЛИВАЙСЯ после анализа первого файла - продолжай до конца
5. В конце работы предоставь сводку: сколько файлов проверено, в скольких найден Артема

Твоя задача:
1. Изучи транскрипты из директории /transcripts/
2. Создай цифровой профиль сотрудника Артем в директории /memories/
3. Профиль должен содержать детальный анализ по модели компетенций из инструкции

Начни с просмотра списка ВСЕХ файлов в /transcripts/ и обработай каждый из них.
Внимательно изучи транскрипт записи встречи с участием указанного сотрудника. 
Внимательно изучи модель личностных компетенций сотрудника и шкалу оценки индикаторов проявления этих компетенций из приложения 2.

1. ЛОГИКА РАБОТЫ

Если профиль для данного человека ещё не создан, сформируй его с нуля.

Если профиль для данного человека уже существует в памяти, обнови его на основе нового контекста, явно отметив изменения.

Все изменения должны быть обоснованы конкретными фактами из транскрипта.

Цель профиля — моделировать возможные реакции и решения сотрудника с максимальной точностью, не приукрашивая данные.

2. ПОРЯДОК АНАЛИЗА по верификации сотрудника.
a. Предварительное изучение транскрипта
•	Внимательно изучи полный транскрипт записи встречи/беседы
•	Идентифицируй анализируемого сотрудника (ФИО и роль)
•	Определи общий контекст встречи, тему, тональность и цель
b. Точная идентификация высказываний участника
•	Фильтрация транскрипта: 
o	Выдели все реплики, принадлежащие только анализируемому участнику
o	Определяй принадлежность высказываний по явным идентификаторам (префикс имени, должности, отметки говорящего)
o	В случае неоднозначности, используй контекст разговора (смысловая связность, обращения, ответы на вопросы)
•	Предварительный анализ: 
o	Создай список всех идентифицированных высказываний участника с временными метками (если доступны)
o	Маркируй все найденные реплики анализируемого участника перед основным анализом
o	Проверь последовательность и связность речи, чтобы выявить возможные ошибки атрибуции
•	Критерии исключения: 
o	Игнорируй высказывания других участников, даже если они упоминают анализируемого участника
o	Отличай схожие имена или должности, обращая внимание на полные формы имен, уточнения и контекст
o	Исключай цитирование слов анализируемого участника другими участниками
•	Верификация: 
o	Проведи финальную проверку, что все отобранные для анализа высказывания действительно принадлежат целевому участнику
o	Оценивай степень уверенности в атрибуции каждого высказывания (высокая, средняя, низкая)
o	В случае сомнений, используй для анализа только высказывания с высокой уверенностью атрибуции
Максимально подробно опиши человека в этом цифровом профиле. 
Не будь очень добр. Оценивай максимально строго. Это необходимо для того, чтобы сотрудник узнал свои минусы и мог их исправить в будущем. Поэтому оценивай максимально строго, подмечай даже малейшие негативные проявления.
Если говоришь о негативном качестве, то явно указывай насколько сильно оно проявляется у сотрудника (по шкале от проявляется редко - проявляется заметно). Только для негативных качеств.
ВАЖНО!! Во всех пунктах, где необходима цитата, давай ее литературный пересказ, вместо цитаты.
Перепроверь ответ.

Дополнительно отдельным блоком выведи результат аналитики по определению уровня по модели спиральной динамики для анализируемого сотрудника. Для этого используй промпт:
Ты- специалист по оценке менеджеров в соответствии с теорией спиральной динамики (Spiral Dynamics).
Твоя цель- определить степень выраженности уровней спиральной динамики в речи анализируемого сотрудника в  транскрипте записи. 
Проанализируй транскрипт записи. Убедись, что анализируемые фразы принадлежат указанному сотруднику.
Внимательно проанализируйте фразы и речь сотрудника, обращая внимание на использование ключевых слов и фраз, характерных для разных уровней СД:
-Красный
-Синий
-Оранжевый
-Зеленый
-Желтый

Оцените структуру мышления, отраженную в ответе, определяя, насколько она линейна или системна, ориентирована на краткосрочные или долгосрочные перспективы.
Проанализируйте отношение сотрудника к изменениям, инновациям и неопределенности.
Обратите внимание на подход к решению проблем и принятию решений, описанный в ответах.
Оцените, как сотрудник воспринимает сотрудников и их роль в организации.
Проанализируйте, как сотрудник понимает цель и смысл работы, компании и бизнеса в целом.
На основе анализа всех аспектов определите преобладающий уровень СД, а также наличие элементов других уровней.
Предоставьте краткое обоснование вашего вывода.

Пример формата вывода:
Анализ ответов сотрудника:

Преобладающий уровень СД: [Указать уровень]
Обоснование:

Ключевые фразы: [Привести 2-3 показательные цитаты]
Структура мышления: [Краткое описание]
Отношение к изменениям: [Краткое описание]
Подход к решению проблем: [Краткое описание]
Восприятие сотрудников: [Краткое описание]
Отношение к цели и смыслу: [Краткое описание]

Элементы других уровней СД: [Указать, если присутствуют, с кратким обоснованием]
Потенциал развития: [Предположение о возможном направлении развития]

Ключевые слова и фразы, характеризующие принадлежность сотрудника к одному из указанных цветом уровней спиральной динамики:

Красный уровень: слова и фразы, обозначающие власть, контроль, сила, доминирование, быстрые решения
Синий уровень: слова и фразы, обозначающие правила, порядок, традиции, иерархия, стабильность
Оранжевый уровень: слова и фразы, обозначающие успех, эффективность, конкуренция, инновации, результаты
Зеленый уровень: слова и фразы, обозначающие консенсус, равенство, сотрудничество, эмпатия, команда
Желтый уровень: слова и фразы, обозначающие системность, адаптивность, интеграция, сложность, холизм

Структура мышления:

Линейное vs. системное мышление
Фокус на краткосрочных vs. долгосрочных последствиях
Ориентация на индивидуальные vs. коллективные результаты

Отношение к изменениям:

Сопротивление vs. принятие
Реактивность vs. проактивность
Фокус на стабильности vs. адаптивности

Подход к решению проблем:

Авторитарный vs. коллаборативный
Основанный на правилах vs. ситуативный
Фокус на симптомах vs. корневых причинах

Восприятие сотрудников:

Как ресурсов vs. как партнеров
Фокус на контроле vs. на развитии
Униформность vs. разнообразие

Отношение к цели и смыслу:

Фокус на личной выгоде vs. на общем благе
Материальные vs. нематериальные ценности
Узкое vs. широкое понимание влияния компании

Интерпретация результатов

 Преобладает Красный уровень (Сила)
Характеристики: Импульсивность, ориентация на краткосрочные результаты, авторитарный стиль управления.
Преобладает Синий уровень (Порядок)
Характеристики: Строгое следование правилам, иерархичность, ориентация на стабильность.
 Преобладает Оранжевый уровень (Достижение)
Характеристики: Ориентация на результат, стратегическое мышление, конкурентность.
Преобладает Зеленый уровень (Согласие)
Характеристики: Командная работа, эмпатия, ориентация на консенсус.
 Преобладает Желтый уровень (Интегральный)
Характеристики: Системное мышление, адаптивность, холистический подход.

Дополнительные критерии оценки

Консистентность ответов:

Если все ответы находятся в пределах двух соседних уровней (например, Оранжевый и Зеленый), это указывает на стабильную позицию на этом уровне или переходное состояние.
Если ответы разбросаны по разным уровням, это может указывать на гибкость мышления или несформированность четкой управленческой позиции.

Доминирующий уровень:

Определяется по наибольшему количеству ответов одного уровня.
В случае равного количества ответов на двух уровнях, доминирующим считается более высокий уровень.

Потенциал развития:

Наличие хотя бы одного ответа на уровень выше доминирующего указывает на потенциал роста в этом направлении.

Контекстуальность:

Учитывайте, что ответы могут варьироваться в зависимости от текущей ситуации в компании и личного опыта менеджера.


Рекомендации по интерпретации

Этот опрос дает общее представление о преобладающем уровне мышления менеджера по теории спиральной динамики. Для более точной оценки рекомендуется дополнительное интервью или более развернутое тестирование.
Результаты опроса следует рассматривать в контексте текущей ситуации в компании, отрасли и личной истории менеджера.
Низкий или высокий балл не означает "плохой" или "хороший" результат. Каждый уровень может быть эффективен в определенном контексте.
Результаты опроса могут служить отправной точкой для обсуждения стиля управления и потенциальных направлений развития менеджера.
При интерпретации результатов важно учитывать, что люди могут проявлять характеристики разных уровней в зависимости от ситуации. Полученный результат отражает преобладающую тенденцию, а не фиксированную характеристику.
Перепроверь ответ.
ВАЖНО!! Во всех пунктах, где необходима цитата, давай ее литературный пересказ, вместо цитаты.
КОНТРОЛЬНАЯ ПРОВЕРКА
Проверка идентификации участника и его высказываний
•	Убедись в точной идентификации целевого участника (ФИО, роль)
•	Проверь, что анализируются только высказывания анализируемого участника
•	Убедись, что не пропущены значимые высказывания участника
•	Проведи финальную верификацию принадлежности всех отобранных для анализа высказываний
Проверка качества анализа
•	Убедись, что анализ проводится по заданному фрагменту беседы
•	Убедись в учете всех факторов, учете кросс-факторного влияния, целостном видении проявлений
•	Убедись, что анализ делается на основе фактов во встрече, а не гипотез
•	Убедись в том, что для каждого вывода установлена степень достоверности

Приложение 2. Модель личностных компетенций сотрудника.
Личностные компетенции
1. Личная ответственность
Описание: Показатель способности отвечать за собственные действия
Индикаторы:
•	A. Отвечает за последствия собственных действий
•	B. Учится на собственных ошибках. При принятии решений учитывает опыт, полученный из предыдущих ситуаций
•	C. Старается не критиковать и не осуждать окружающих без достаточных на то оснований
•	D. Не отступается от поставленных целей независимо от того, насколько успешны собственные действия по их достижению
2. Планирование и организация
Описание: Использование логических, систематических и упорядоченных процедур для достижения целей
Индикаторы:
•	A. Эффективно работает в установленных временных рамках и с расставленными приоритетами. Использует логические, практические и эффективные подходы.
•	B. Расставляет приоритеты для достижения оптимальной продуктивности.
•	C. Разрабатывает процедуры, процессы и системы для достижения упорядоченности, точности, эффективности и продуктивности.
•	D. Предвосхищает возможные эффекты, результаты и риски.
•	E. Разрабатывает возможные планы дальнейшего развития, чтобы минимизировать потери, ошибки и риски.
•	F. Определяет, регулирует и управляет ресурсами в соответствии с приоритетами.
•	G. Отслеживает выполнение планов и вносит поправки, если необходимо.
3. Достижение целей
Описание: Постановка целей и следование им до достижения, предпринимая необходимые действия и преодолевая препятствия или обстоятельства
Индикаторы:
•	A. Ставит реалистичные, значимые и достижимые цели
•	B. Определяет и выполняет необходимые требования и сроки для достижения поставленных в работе целей
•	C. Приступает к действиям, направленным на достижение цели, немедленно, без проволочек
•	D. Не отступается от поставленных целей несмотря на возникающие препятствия и неблагоприятные обстоятельства
4. Самоорганизация
Описание: Проявление самоконтроля и способность управлять временем и приоритетами
Индикаторы:
•	A. Самостоятельно добивается поставленных целей, работает эффективно и организованно
•	B. Расставляет приоритеты в работе в соответствии с должностными обязанностями
•	C. Умеет самостоятельно выполнять работу на заданном уровне и достигать поставленных целей без непосредственного контроля со стороны начальства
•	D. Не отвлекается и старается свести к минимуму количество перерывов во время работы с целью выполнить работу качественно и в поставленные сроки
5. Психологическая устойчивость
Описание: Способность быстро восстанавливаться после неприятных ситуаций
Индикаторы:
•	A. Не отступается от поставленной цели несмотря на возникающие трудности и неприятности
•	B. Объективно относится к отказам и критике в свой адрес
•	C. Сразу же, без проволочек берется за решение внезапно возникших проблем
•	D. Быстро восстанавливается после неудач и поражений
6. Концептуальное мышление
Описание: Анализ гипотетических ситуаций, моделей или абстрактных концепций, чтобы выявить взаимосвязи и выработать новые идеи
Индикаторы:
•	A. Умеет находить альтернативные способы достижения поставленных целей
•	B. Умеет предусмотреть все возможные варианты развития ситуации и выработать соответствующие стратегии работы
•	C. Умеет разрабатывать эффективные планы и стратегии, направленные на достижение желаемых результатов
•	D. Умеет просчитывать все возможные исходы и последствия гипотетических ситуаций
7. Принятие решений
Описание: Использование эффективных процессов для принятия решений
Индикаторы:
•	A. Проявляет способность принимать сложные решения своевременно.
•	B. Собирает соответствующие материалы и развивает логическое обоснование для принятия решений.
•	C. Оценивает влияние или последствия решений, прежде чем их принять.
•	D. Действует решительно, несмотря на препятствия, сопротивление или оппозицию.
•	E. Принимает последствия решений.
•	F. Готов корректировать ошибочные решения, если необходимо.
•	G. Защищает рациональное обоснование решений, если необходимо.
8. Лидерство
Описание: Достижение выдающихся деловых результатов через людей
Индикаторы:
•	A. Вдохновляет других вескими убеждениями.
•	B. Идет на риск ради принципов, ценностей или целей. Вызывает доверие и проявляет целостность за счет ощутимого соответствия слов и действий (делает, что говорит).
•	C. Проявляет оптимизм и положительные ожидания от других.
•	D. Делегирует соответствующие обязанности и полномочия.
•	E. Привлекает людей к принятию решений, которые влияют на них.
•	F. Решает проблемы результативности быстро, справедливо и последовательно.
•	G. Адаптирует методы и подходы к нуждам и мотивациям других.
•	H. Принимает решения, позволяющие избежать или смягчить негативные последствия для людей. Проявляет верность тем, кто имеет право голоса.
Шкала оценки
Степень проявления поведенческих индикаторов оценивается по следующей шкале:
•	н/д - нет информации (в том случае, если у оценивающей стороны не было возможности наблюдать за проявлением данного индикатора)
•	0 - Никогда (перед оценивающей стороной поведенческий индикатор проявлен не был)
•	1 - В очень редких случаях
•	2 - Иногда
•	3 - В средней степени
•	4 - Почти всегда
•	5 - Стабильно всегда
"""

class MemoryTool(BetaAbstractMemoryTool):
    def __init__(self, base_path:str = "./memory"):
        super().__init__()
        self.base_path = Path(base_path)
        self.memories_dir = self.base_path / "memories"
        self.transcripts_dir = self.base_path / "transcripts"
        
        self.memories_dir.mkdir(parents=True, exist_ok=True)
        self.transcripts_dir.mkdir(parents=True, exist_ok=True)
        
    def _validate_path(self, path: str) -> tuple[Path, bool]:
        if path.startswith("/memories"):
            relative_path = path[len("/memories"):].lstrip("/")
            full_path = self.memories_dir / relative_path if relative_path else self.memories_dir
            read_only = False
        elif path.startswith("/transcripts"):
            relative_path = path[len("/transcripts"):].lstrip("/")
            full_path = self.transcripts_dir / relative_path if relative_path else self.transcripts_dir
            read_only = True
        else:
            raise ValueError(f"Path must start with /memories or /transcripts, got: {path}")
        
        try:
            if read_only:
                full_path.resolve().relative_to(self.transcripts_dir.resolve())
            else:
                full_path.resolve().relative_to(self.memories_dir.resolve())
        except ValueError as e:
            raise ValueError(f"Path {path} would escape allowed directory") from e
        
        return full_path, read_only
    
    @override
    def view(self, command: BetaMemoryTool20250818ViewCommand) -> str:
        full_path, _ = self._validate_path(command.path)

        if full_path.is_dir():
            items = []
            try:
                for item in sorted(full_path.iterdir()):
                    if item.name.startswith("."):
                        continue
                    items.append(f"{item.name}/" if item.is_dir() else item.name)
                
                if not items:
                    return f"Directory: {command.path}\n(пустая директория)"
                
                return f"Directory: {command.path}\n" + "\n".join([f"- {item}" for item in items])
            except Exception as e:
                raise RuntimeError(f"Cannot read directory {command.path}: {e}") from e
                
        elif full_path.is_file():
            try:
                content = full_path.read_text(encoding="utf-8")
                lines = content.splitlines()
                view_range = command.view_range
                
                if view_range:
                    start_line = max(1, view_range[0]) - 1
                    end_line = len(lines) if view_range[1] == -1 else view_range[1]
                    lines = lines[start_line:end_line]
                    start_num = start_line + 1
                else:
                    start_num = 1

                numbered_lines = [f"{i + start_num:4d}: {line}" for i, line in enumerate(lines)]
                return "\n".join(numbered_lines)
            except Exception as e:
                raise RuntimeError(f"Cannot read file {command.path}: {e}") from e
        else:
            raise RuntimeError(f"Path not found: {command.path}")
        
    @override
    def create(self, command: BetaMemoryTool20250818CreateCommand) -> str:
        full_path, read_only = self._validate_path(command.path)
        
        if read_only:
            raise PermissionError(f"Cannot create files in /transcripts directory: {command.path}")
        
        if full_path.exists():
            raise FileExistsError(f"File already exists: {command.path}")
            
        full_path.parent.mkdir(parents=True, exist_ok=True)
        full_path.write_text(command.file_text, encoding="utf-8")
        return f"File created successfully at {command.path}"
    
    @override
    def delete(self, command: BetaMemoryTool20250818DeleteCommand) -> str:
        full_path, read_only = self._validate_path(command.path)
        
        if read_only:
            raise PermissionError(f"Cannot delete files in /transcripts directory: {command.path}")
        
        if not full_path.exists():
            raise FileNotFoundError(f"File not found: {command.path}")
            
        full_path.unlink()
        return f"File deleted successfully: {command.path}"

    @override
    def insert(self, command: BetaMemoryTool20250818InsertCommand) -> str:
        full_path, read_only = self._validate_path(command.path)
        
        if read_only:
            raise PermissionError(f"Cannot modify files in /transcripts directory: {command.path}")
        
        if not full_path.is_file():
            raise FileNotFoundError(f"File not found: {command.path}")
            
        content = full_path.read_text(encoding="utf-8")
        lines = content.splitlines(keepends=True)
        
        insert_line = command.insert_line
        if insert_line < 0 or insert_line > len(lines):
            raise ValueError(f"Invalid insert_line: {insert_line}")
            
        lines.insert(insert_line, command.new_str + "\n")
        full_path.write_text("".join(lines), encoding="utf-8")
        return f"Content inserted at line {insert_line} in {command.path}"

    @override
    def rename(self, command: BetaMemoryTool20250818RenameCommand) -> str:
        old_path, read_only = self._validate_path(command.old_path)
        
        if read_only:
            raise PermissionError(f"Cannot rename files in /transcripts directory: {command.old_path}")
        
        if not old_path.exists():
            raise FileNotFoundError(f"File not found: {command.old_path}")
            
        new_path, _ = self._validate_path(command.new_path)
        
        if new_path.exists():
            raise FileExistsError(f"Target path already exists: {command.new_path}")
            
        old_path.rename(new_path)
        return f"File renamed from {command.old_path} to {command.new_path}"

    @override
    def str_replace(self, command: BetaMemoryTool20250818StrReplaceCommand) -> str:
        full_path, read_only = self._validate_path(command.path)
        
        if read_only:
            raise PermissionError(f"Cannot modify files in /transcripts directory: {command.path}")

        if not full_path.is_file():
            raise FileNotFoundError(f"File not found: {command.path}")

        content = full_path.read_text(encoding="utf-8")
        count = content.count(command.old_str)
        
        if count == 0:
            raise ValueError(f"Text not found in {command.path}")
        elif count > 1:
            raise ValueError(f"Text appears {count} times in {command.path}. Must be unique.")

        new_content = content.replace(command.old_str, command.new_str)
        full_path.write_text(new_content, encoding="utf-8")
        return f"File {command.path} has been edited"


if __name__ == "__main__":

    client = anthropic.Anthropic(
        api_key=API
    )

    memory = MemoryTool()

    runner = client.beta.messages.tool_runner(
        betas=["context-management-2025-06-27"],
        model=MODEL,
        max_tokens=20000,
        system=MEMORY_SYSTEM_PROMPT,
        tools=[memory],
        messages=[
            {
                "role":"user",
                "content":DIGITAL_PROFILE_PROMPT,
            }
        ]
    )

    for message in runner:
        for block in message.content:
            if block.type == "text":
                print(block.text)